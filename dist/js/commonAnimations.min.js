import { CONFIG_PROD as e } from "https://cdn.jsdelivr.net/gh/blountdj/portfolio-site@v24/dist/js/config.min.js"; let CONFIG = e, { textSplit: t, wordsSplit: o, emojisList: a } = await import(`${CONFIG.path}${CONFIG.jsFolder}utilities${CONFIG.jsPostFix}.js`); export const h1LoadInit = e => { let o = e.querySelector("h1"); t(o); let a = e.querySelectorAll(".page-h1 > .word"); gsap.set(a, { display: "flex" }), a.forEach(e => { let t = e.querySelectorAll(".page-h1 > .word >.char"); gsap.set(t, { x: 100, opacity: 0 }), t.forEach(t => { let o = document.createElement("div"); o.classList.add("char-wrapper"), o.appendChild(t), e.appendChild(o) }) }) }; export const h1LoadEffect = e => { let t = e.querySelectorAll(".page-h1 > .word > .char-wrapper > .char"); gsap.to(t, { x: 0, opacity: 1, duration: 1, ease: "power2.inOut", stagger: { each: .075, from: "random" } }) }; export const elemFadeIn = e => { gsap.to(e, { opacity: 1, duration: .5, ease: "power2.out" }) }; export const elemScaleUp = (e, t, o = "power2.out") => { gsap.to(e, { scale: t, opacity: 1, duration: .75, ease: o }) }; export const elemScaleTo1Center = e => { gsap.to(e, { scaleX: 1, transformOrigin: "center", duration: .75, ease: "power2.out" }) }; export const elemFadeOut = e => { gsap.to(e, { autoAlpha: 0, duration: .5, ease: "power2.inOut" }) }; export const yPercentOpacityReturn = e => { gsap.to(e, { yPercent: 0, opacity: 1, duration: .6, ease: "power3.inout" }) }; export const yPercentOpacityReturnStagger = e => { gsap.to(e, { yPercent: 0, opacity: 1, duration: .6, ease: "power3.inout", stagger: { each: .075 } }) }; export const xPercentOpacityReturn = e => { gsap.to(e, { xPercent: 0, opacity: 1, duration: .6, ease: "power3.inout" }) }; export const staggerOpacityToOneEffect = e => { gsap.to(e, { opacity: 1, duration: 1, ease: "power2.inOut", stagger: { each: .075 } }) }; export const staggerOpacityAndScaleToOneEffect = e => { gsap.to(e, { opacity: 1, scale: 1, duration: 1, ease: "power2.inOut", stagger: { each: .075 } }) }; export const addH1HoverAnimations = e => { e.forEach(e => { e.addEventListener("mouseenter", () => { gsap.to(e, { textShadow: "0 0 12px var(--lighter-green)", duration: .15, ease: "Power4.inout" }) }) }), e.forEach(e => { e.addEventListener("mouseleave", () => { gsap.to(e, { textShadow: "0 0 7px var(--lighter-green)", duration: .15, ease: "Power4.inout" }) }) }) }; export const addDarrenH2Animations = e => { let t = e.querySelector(".h2-heading"); o(t); let r = e.querySelector(".h2-emoji"); gsap.set(r, { opacity: 0, scale: 0 }); let n = t.querySelectorAll(".word"); n.forEach(e => { e.addEventListener("mouseenter", () => { r.textContent = a[Math.floor(Math.random() * a.length)], gsap.to(r, { opacity: 1, scale: 1, duration: .1, ease: "Power4.inOut" }) }), e.addEventListener("mouseleave", () => { gsap.to(r, { opacity: 0, scale: 0, duration: .1, ease: "Power4.inOut" }) }) }) }; export const h1ShineEffect = e => { e.forEach((e, t) => { setTimeout(() => { gsap.timeline().add(gsap.to(e, { textShadow: "0 0 16px var(--lighter-green)", duration: .14, ease: "elastic.out(1, 0.3)" }, 0)).add(gsap.to(e, { textShadow: "0 0 7px var(--lighter-green)", duration: .14, ease: "elastic.out(1, 0.3)" }, .2)) }, 40 * t) }) }; export const moveRightFiveOpacityOne = e => { gsap.to(e, { right: "5%", opacity: 1, duration: 1.25, ease: "back.inOut(1.7)" }) }; export const moveLeftFiveOpacityOne = e => { gsap.to(e, { left: "5%", opacity: 1, duration: 1.25, ease: "back.inOut(1.7)" }) }; export const imageStationaryAnimation = e => { let t = gsap.timeline({ repeat: -1, yoyo: !0, ease: "power1.inOut" }); e.length > 0 ? e.forEach(e => { t.to(e, { x: "-=2.5", y: "+=2.5", duration: .5 }) }) : t.to(e, { x: "-=2.5", y: "+=2.5", duration: .5 }) }; export const unBlurOpacity1 = e => { gsap.to(e, { filter: "blur(0px)", opacity: 1, duration: .75, ease: "power1.inOut" }) }; export const unBlurOpacity1Stagger = e => { gsap.to(e, { filter: "blur(0px)", opacity: 1, duration: .75, ease: "power1.inOut", stagger: { each: .075 } }) }; let animation = { element: document.querySelector(".pt_container"), duration: .8, ease: "power4.inOut", stagger: .048 }, cloneBoxes = () => { for (let e = 0; e < 80; e++) { let t = document.createElement("div"); t.classList.add("pt_box"), animation.element.append(t) } }; export const initGridTransitionAnimation = async () => { document.querySelector(".pt_box") || cloneBoxes(); let e = document.querySelectorAll(".pt_box"), t = ["top", "left", "right", "bottom"]; e.forEach(e => { let o = t[Math.floor(Math.random() * t.length)]; gsap.set(e, { scaleY: 0, transformOrigin: o }) }) }; let tlPage = gsap.timeline({ defaults: { duration: animation.duration, ease: animation.ease, stagger: { grid: [1, 11], from: "random", each: animation.stagger } } }); export const showGridTransitionAnimation = () => new Promise(e => { tlPage.to(".pt_box", { scaleY: 1, transformOrigin: "0% 100%", onComplete: e }) }); export const hideGridTransitionAnimation = () => new Promise(e => { tlPage.to(".pt_box", { scaleY: 0, transformOrigin: "0% 0%", onComplete: e }) });